# ! mkdir heart-disease && cd heart-disease && wget https://archive.ics.uci.edu/static/public/45/heart+disease.zip

# ! unzip heart+disease.zip

import numpy as np
import pandas as pd

import mlflow

mlflow.set_tracking_uri("http://0.0.0.0:5000")
mlflow.set_experiment("heart-disease-experiment")

cleveland = pd.read_csv("heart-disease/processed.cleveland.data", names=["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num"])
cleveland.info()

hungary = pd.read_csv("heart-disease/processed.hungarian.data", names=["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num"])
hungary.info()

switzerland = pd.read_csv("heart-disease/processed.switzerland.data", names=["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num"])
switzerland.info()

veterans = pd.read_csv("heart-disease/processed.va.data", names=["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num"])
veterans.info()

heart_disease_df = pd.concat([cleveland, hungary, switzerland, veterans])
heart_disease_df.shape

# num: diagnosis of heart disease (angiographic disease status)
#         -- Value 0: < 50% diameter narrowing
#         -- Value 1: > 50% diameter narrowing
heart_disease_df.num.value_counts()

# ca: number of major vessels (0-3) colored by flourosopy
heart_disease_df.ca.value_counts()

# thal: 3 = normal; 6 = fixed defect; 7 = reversable defect
heart_disease_df.thal.value_counts()

# select columns
heart_disease_df = heart_disease_df[["age", "sex", "trestbps", "chol", "fbs", "num"]]
heart_disease_df.shape

heart_disease_df.head(3)

(heart_disease_df=="?").sum()

heart_disease_df.trestbps.replace("?", np.nan, inplace=True)
heart_disease_df.trestbps.fillna(heart_disease_df.trestbps.astype(float).mean().round(0), inplace=True)
heart_disease_df.chol.replace("?", np.nan, inplace=True)
heart_disease_df.chol.fillna(heart_disease_df.chol.astype(float).mean().round(0), inplace=True)
heart_disease_df.fbs.replace("?", np.nan, inplace=True)
heart_disease_df.fbs.fillna(heart_disease_df.fbs.astype(float).mean().round(0), inplace=True)
(heart_disease_df=="?").sum()

# heart_disease_df.sketch.howto("create a machine learning model to predict ca")
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Split the data into training and testing sets
X = heart_disease_df.drop('num', axis=1)
y = heart_disease_df['num']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

with mlflow.start_run():
    params = {"C": 0.1, "random_state": 42}
    mlflow.log_params(params)
    # Create a logistic regression model and fit it to the training data
    logreg = LogisticRegression(**params)
    logreg.fit(X_train, y_train)
    # Make predictions on the test set and calculate accuracy score
    y_pred = logreg.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    mlflow.log_metric("accuracy", accuracy)
    mlflow.sklearn.log_model(logreg, artifact_path="models")
    print('Accuracy: {:.2f}'.format(accuracy))

mlflow.end_run()

# import pickle

# pickle.dump(logreg, open("heart-disease-logreg-model.pkl", 'wb'))

mlflow.log_artifact(local_path="heart-disease-logreg-model.pkl", artifact_path="models_pickle")
